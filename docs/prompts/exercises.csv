Class,Lesson Focus,Exercise Names,Prompt for Exercise 1 (In-Class Content),Prompt for Homework 1 (Extension),Prompt for Exercise 2 (In-Class Content),Prompt for Homework 2 (Extension)
C3,Introduction to Designing Databases,Conceptual Modeling & Design Critique,"Design a Whiteboard Conceptualization group exercise for identifying entities and relationships in a university course registration system. Provide the full, detailed instructions for this in-class activity, including the scenario description and expected outputs (list of entities and relationship types).","Design a Homework Extension based on the C3-E1 scenario. Students must convert the chosen entities and relationships into an initial UML class diagram, showing attributes and multiplicity.",Design a Design Critique exercise where students compare two deliberately flawed conceptual schemas (for a music library) and propose specific improvements for each. Provide the full instructions and the two flawed schemas for analysis.,Design a Homework Extension based on the C3-E2 critique. Students must select the better of the two schemas and write a 200-word justification explaining why their proposed improvement resolves a potential data redundancy or integrity issue.
C4,Database Architecture,Architecture Mapping & Debate,"Design a System Component Mapping exercise. Students must label and explain the function of the DBMS within a three-tier architecture diagram (browser, app server, DB server). Provide the exercise instructions and the conceptual diagram to be labeled.",Design a Homework Extension based on the C4-E1 mapping. Students must identify three points in the architecture where security vulnerabilities could be exploited and suggest a specific architectural countermeasure for each point.,"Design a Centralized vs. Distributed Debate exercise. Students must list and justify three pros and three cons for an assigned architecture (for a global bank), focusing on performance and maintenance trade-offs.","Design a Homework Extension based on the C4-E2 debate. Students must choose an application (e.g., a social media platform) and argue which architecture (centralized or distributed) is superior for meeting requirements like high availability and rapid scaling."
C5,The Relational Model,Schema Translation & Constraints,"Design a Schema-to-Table Translation exercise. Students must convert a simple conceptual schema (list of entities and attributes) into a Relational Schema using formal notation, clearly labeling Primary Keys (PK​) and Foreign Keys (→).","Design a Homework Extension based on the C5-E1 schema. Students must write the SQL CREATE TABLE statements for the generated relational schema, including PRIMARY KEY, FOREIGN KEY, and a NOT NULL constraint for at least one attribute.","Design a Constraint Violation Challenge exercise. Students identify the specific integrity constraint (Entity, Referential, or Domain) violated by three given INSERT or UPDATE statements targeting a simple table set.",Design a Homework Extension based on the C5-E2 challenge. Students must correct the three original INSERT or UPDATE statements so that they no longer violate any integrity constraints in the given schema.
C6,Relational Algebra,Operator Matching & Evaluation,"Design an Operator Matching exercise. Students match five plain-language queries (e.g., ""Find all customers who haven't placed an order"") to the correct sequence of Relational Algebra operators (σ, π, ⋈, etc.) and write the full expression.","Design a Homework Extension based on the C6-E1 matching. Students must implement the two most complex Relational Algebra expressions (the ones using the most operators) in a modern procedural language (e.g., Python pseudocode) to show how the result set is built.","Design a Step-by-Step Expression Evaluation exercise. Provide a complex Relational Algebra expression involving at least three operators and require students to decompose it, describing the intermediate result of each operation.","Design a Homework Extension based on the C6-E2 evaluation. Students must rewrite the provided complex Relational Algebra expression to be equivalent, but using only the five fundamental operators (σ,π,∪,−,×)."
C7,Relational Calculus,RA to RC Translation & Predicates,Design a Translation Challenge: RA to RC exercise. Students must write the equivalent Tuple Relational Calculus (TRC) expression for a provided Relational Algebra query. Include a sample query and the formal syntax notes.,"Design a Homework Extension based on the C7-E1 challenge. Students must explain in a 150-word paragraph why Relational Calculus is considered a declarative language, while Relational Algebra is procedural, using the translation as an example.","Design a Predicate Formulation exercise. Students must focus on writing the complex logical predicate (using quantifiers like ∃ and ∀) necessary to express a sophisticated English query (e.g., ""Find the suppliers who supply every part"").",Design a Homework Extension based on the C7-E2 predicate. Students must convert their complex Tuple Relational Calculus predicate into an equivalent Domain Relational Calculus (DRC) expression.
C8,Introduction to SQL,Basic DQL & DML,"Design a Basic Select & Filter exercise. Using a hypothetical Student/Course schema, students write and execute five basic SELECT queries, each using a different WHERE condition (e.g., range, equality, LIKE).",Design a Homework Extension based on the C8-E1 queries. Students must provide a screenshot of the EXPLAIN plan for two of their SELECT queries and briefly analyze which one is likely to be more efficient and why.,"Design a Simple Data Manipulation (DML) exercise. Students write and execute the appropriate INSERT, UPDATE, and DELETE statements for three specified, real-world data change scenarios.","Design a Homework Extension based on the C8-E2 DML. Students must wrap their three DML statements inside a single SQL transaction and include the COMMIT or ROLLBACK statement, explaining which one is appropriate for the scenario."
C9,SQL,Multi-JOIN & Aggregation,"Design a Multi-Table JOIN Practice exercise. Students must write an SQL query that requires a THREE-TABLE INNER JOIN and correctly uses table aliases for readability. Provide the query goal (e.g., ""Find instructors of courses taken by a specific student"").","Design a Homework Extension based on the C9-E1 JOIN. Students must rewrite the same query using a combination of LEFT or RIGHT OUTER JOIN syntax instead of INNER JOIN, explaining how the result set could differ in a database with incomplete data.",Design an Aggregation & Grouping exercise. Students write SQL queries using COUNT and AVG with GROUP BY and a HAVING clause to answer two analytical questions about department data.,Design a Homework Extension based on the C9-E2 aggregation. Students must write a single SQL query that uses the CUBE or ROLLUP clause to generate a single report that includes the results of both original aggregation queries plus the overall total.
C10,Advanced SQL,Subquery/JOIN & Window Functions,"Design a Subquery vs. JOIN Optimization exercise. Students must write one SQL query using an INNER JOIN and a second, equivalent query using an IN subquery to solve the same problem, then briefly compare the readability.",Design a Homework Extension based on the C10-E1 queries. Students must rewrite the same query using an EXISTS correlated subquery and explain in 100 words how this third method differs in its execution model compared to the previous two.,Design a Window Function Application exercise. Students must write an SQL query using the RANK() or ROW_NUMBER() window function to rank sales employees by performance within specific geographical regions.,"Design a Homework Extension based on the C10-E2 window function. Students must write an SQL query using a different window function, like LAG() or LEAD(), to calculate the sales difference between an employee and the person ranked immediately above them in their region."
C13,Views & Document Databases,Views & Relational-to-NoSQL,Design a Creating a Simplified View exercise. Students must write the CREATE VIEW statement for a provided complex SELECT query and submit a brief written justification for how the view enhances security.,Design a Homework Extension based on the C13-E1 view. Students must demonstrate the View Update Restriction by writing a failed UPDATE statement on the created view and explaining in 50 words why the DBMS rejects the update.,"Design a Relational-to-Document Mapping exercise. Students are given a simple Relational Schema (Customer/Order) and must propose two different MongoDB modeling approaches: Embedding and Referencing, listing one major pro and con for each.",Design a Homework Extension based on the C13-E2 mapping. Students must write the two MongoDB find() queries (one for the Embedding model and one for the Referencing model) that retrieve the customer's name and all of their order dates.
C14,MongoDB,MongoDB CRUD & MERN Deployment,"Design a MongoDB CRUD Practice exercise. Students write three MongoDB commands: a complex find() using nested field queries, an insertMany() command, and an updateOne() command using the $set operator.",Design a Homework Extension based on the C14-E1 CRUD. Students must write a MongoDB query that uses the $lookup operator (similar to a JOIN) to link two separate collections and retrieve related data.,"Design a Full-Stack Deployment Kickoff (MERN) lab. Students are instructed to clone a minimal MERN repo, connect the React Frontend to Netlify via GitHub, and connect the Express Backend to Render via GitHub. The final step is updating the API endpoint in the React code to the new Render URL.","Design a Homework Extension based on the C14-E2 deployment. Students must add a new GET route to the Express server, implement a new MongoDB query for that route, and commit the change to GitHub to demonstrate automated CI/CD deployment to Render."
C15,MERN Stack & Review,Data Flow Tracing & Final Review,"Design a Full-Stack Data Flow Tracing exercise. Students trace a single data request (e.g., fetching a list of items) from the React front-end on Netlify to the Express API on Render and the MongoDB Atlas database, identifying the points where CORS and Environment Variables are critical.",Design a Homework Extension based on the C15-E1 data flow. Students must provide a screenshot of the CORS configuration code in the Express server and explain in 100 words why this specific configuration is necessary for the split Netlify/Render deployment.,"Design a Final Exam Review exercise. Create a set of 10 rapid-fire conceptual questions covering the entire course (e.g., what is 3NF, what is the difference between σ and π, what does SELECT * FROM V do).",Design a Homework Extension based on the C15-E2 review. Students must select two concepts from the 10 review questions (one SQL and one NoSQL) and write a 150-word practical example of when they would use each concept in a capstone project.